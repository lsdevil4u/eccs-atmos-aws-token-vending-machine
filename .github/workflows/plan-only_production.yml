# This is a basic workflow to help you get started with Actions

name: plan_only_prod

# Controls when the workflow will run
on:
  push:
      branches:
        - main
      paths:
      - 'tvm_lambda/**'
#        - dev_proof_of_concept_environment
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  plan_only_prod:
    # The type of runner that the job will run on
    #runs-on: [self-hosted, eccsdevops-aws-dev]
    runs-on: ['self-hosted', 'aws-devops-production']
    container:
        #image: alpine:latest
        image: sanofi-docker-atmos-local.jfrog.io/furno_devops_v03:latest
        credentials:
        # the artifactory user name is the complete email address of the user in lowercase, example: gitlab-automation@sanofi.com
          username: ${{ secrets.DOCKER_USER}}
        # the artifactory token is obtained from the artifactory user's profile page and is used as-is (ie. no base64 encoding)
          password: ${{ secrets.DOCKER_TOKEN}}

    env:
      PLAN: 'create.plan'
      DESTROYPLAN: 'destroy.plan'
      TF_VAR_ADMINKEY: ${{ secrets.TF_VAR_ADMINKEY}}
      TF_VAR_SMTP_PASSWORD: ${{ secrets.TF_VAR_SMTP_PASSWORD}}
         
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Assume the aws role and set up the credentials for awscli/terraform
      - name: assume role and run terraform plan
        run: |
          cd tvm_lambda
          cp vars/variables-devops-prod-aws.tf variables-devops-prod-aws.tf
          cp --verbose features/lambda_ce_prod.tf lambda_ce.tf
          ls -la
          terraform init -backend-config="backend/backend-devops-prod-aws.tf"
          terraform validate
          terraform plan -out $PLAN 